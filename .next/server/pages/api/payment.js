"use strict";(()=>{var a={};a.id=971,a.ids=[971],a.modules={538:(a,b,c)=>{c.r(b),c.d(b,{config:()=>n,default:()=>m,handler:()=>p});var d={};c.r(d),c.d(d,{default:()=>j});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(7476);async function j(a,b){let c=(await i.A).db("Parking_ByANI");0===(await c.listCollections({name:"Payments"}).toArray()).length&&await c.createCollection("Payments");let d=c.collection("Payments");if("POST"===a.method){let{ticketNo:c,name:e}=a.body;if(!c||!e)return b.status(400).json({message:"Missing ticketNo or name"});let f=new Date,g={ticketNo:c,name:e,transactionId:null,paid:!1,createdAt:f,updatedAt:f};return await d.insertOne(g),b.status(201).json({message:"Payment intent created",payment:g})}if("PATCH"===a.method){let{ticketNo:c,transactionId:e,paid:f,ticketData:g}=a.body;if(!c||!e||"boolean"!=typeof f)return b.status(400).json({message:"Missing required fields"});let h=new Date;return 1===(await d.updateOne({ticketNo:c},{$set:{transactionId:e,paid:f,updatedAt:h}})).modifiedCount?b.status(200).json({message:"Payment updated"}):b.status(404).json({message:"Payment not found"})}b.setHeader("Allow",["POST","PATCH"]),b.status(405).end()}var k=c(8112),l=c(8766);let m=(0,h.M)(d,"default"),n=(0,h.M)(d,"config"),o=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/payment",pathname:"/api/payment",bundlePath:"",filename:""},userland:d,distDir:".next",projectDir:""});async function p(a,b,c){let d=await o.prepare(a,b,{srcPage:"/api/payment"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,k.getTracer)(),e=d.getActiveScopeSpan(),i=o.instrumentationOnRequestError.bind(o),j=async e=>o.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:o.isDev,page:"/api/payment",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==l.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await j(e):await d.withPropagatedContext(a.headers,()=>d.trace(l.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:k.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},j))}catch(a){if(o.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7476:(a,b,c)=>{let d;c.d(b,{A:()=>g});let e=require("mongodb"),f=process.env.MONGODB_URI||"mongodb+srv://ani:ani123@clusterani.r8dajhu.mongodb.net/";global._mongoClientPromise||(d=new e.MongoClient(f,{}),global._mongoClientPromise=d.connect());let g=global._mongoClientPromise}};var b=require("../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=538));module.exports=c})();